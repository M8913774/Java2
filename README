Module: GuessNumber.
Реализовать игру “угадай число”. Программа загадывает случайное число в пределах от 1
до 100. Задача игрока - отгадать это число не более чем за восемь попыток. После каждой
попытки программа подсказывает больше загаданное число или меньше
предполагаемого. При проигрыше программа показывает загаданное число. Разделите
реализацию пользовательского интерфейса и логику игры с помощью классов.
---------------------------------------------------------------------------------------
Module: Calc2.
Написать стэковый калькулятор, который принимает в качестве аргумента командой строки имя
файла содержащего команды. Если нет аргумента то использовать стандартный ввод для чтения
команд. Использовать вещественные числа.
Реализовать следующий набор команд:
• # - строка комментарий
• POP, PUSH — работа со стэком
• Арифметические операции + , - , * , /, sqrt. Используют один или два верхних элемента
стека, изымают их из стека, помещая результат назад
• PRINT — печать верхнего элемента стека (без удаления из стека)
• DEFINE — задать значение параметра. В дальнейшем везде использовать вместо
параметра это значение. Например:
DEFINE a 4
PUSH a
SQRT
PRINT
Должно вывести 4
Написать Unit test который будет исполнять тестовую программу для решения квадратного
уравнения с помощью данного калькулятора по формуле:
X1 = (-b + sqrt(b*b – 4ac)) / 2a
X2 = (-b - sqrt(b*b – 4ac)) / 2a
---------------------------------------------------------------------------------------
Module: CalcAnnotation.
Развитие калькулятора.
Создать класс фактори для создания команд. То есть создать отельный класс который будет
иметь с аргументом имя команды и возвращать реализацию интерфейса Command для
данной команды. Реализовать следующие возможности:
1. Конфигурация списка команд через property файл factory класса. Это позволит
добавлять команды без перекомпиляции остального проекта. Добавить новые
арифметические команды: EXP, LOG
2. Реализовать Dependency injection для команд калькулятора: добавить аннотацию
@In(arg={STACK, CONTEXT}) для полей классов реализующих команды
калькулятора. При создание команды в фактори классе проверять наличие подобных
аннотаций и устанавливать данные поля до первого вызова команды. Реализовать
STACK, CONTEXT как перечисление (Enum)
----------------------------------------------------------------------------------------
Module: Sorting.
Написать программу, которая будет принимать в качестве аргумента имя текстового файла и
выводить CSV файл с колонками:
1. Слово
2. Частота
3. Частота%
CSV файл должен быть упорядочен по убыванию частоты, то есть самые частые слова
должны идти в начале. Для чтения использовать: java.io.InputStreamReader, например:
Reader r = new InputStreamReader(new BuffredInputStream(new FileInputStream(“имя файла”)));
Использовать StringBuilder класс для построения слова. Разделителями считать все символы
кроме букв и цифр (использовать метод Character.isLetterOrDigit). Для хранения в памяти
можно использовать Map, который должен будет хранить объекты специального класса
(например WordCounter).
Для сортировки (после заполнения) можно создать List и скопировать в него map.values.
Класс WordCounter должен реализовать интерфейс Comporable.
-----------------------------------------------------------------------------------------
Module: Server.
Работа с файлами (package htmlGenerator)
Написать генератор index.html файла. То есть для заданной директории создать HTML файл,
который содержит кликабельный список всех директорий и файлов внутри заданной
директории. При этом:
• В начале идёт директория .. которая указывает на верх дерева файловой системы.
• Затем идёт список директорий отсортированный по именам
• Потом список файлов отсортированный по именам
• Кроме того показывать информацию о дате модификации и размере (для файлов)
***************
(package server)
Используя результат предыдущего задания написать простейший HTTP сервер, который
будет принимать в качестве аргументов порт и директорию доступ до которой надо дать по
HTTP. Реализовать две команды:
• GET — получить ресурс
• HEAD — получить только заголовки от GET без самого ресурса
Если запрошенная директория содержит файл index.html сервер возвращает его, иначе
использует результат предыдущего задания для создания листинга директории.

